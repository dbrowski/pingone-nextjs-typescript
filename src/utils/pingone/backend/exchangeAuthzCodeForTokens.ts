import base64Encode from "../base64Encode";

/**
 * This function exchanges an authorization code for tokens using the PingOne
 * authentication API's /token endpoint.
 * @param envID - A unique identifier for the PingOne environment where the
 * application is registered. It is used to specify which environment the API
 * call should be made to.
 * @param clientID - A unique identifier assigned to a client application when
 * it is registered with PingOne (e.g., an application connection is created).
 * It is used to identify the client application when making requests to
 * PingOne's authorization server (authentication API).
 * @param clientSecret - A confidential string that is used to authenticate the
 * client application to the authorization server. It is generated by creating
 * a PingOne application connection. The client secret must be kept
 * confidential and not shared with anyone except the authorization server.
 * @param redirectURI - The same URL that was sent in the redirect_URI
 * parameter in the authorization request.
 * @param authorizationCode - The authorization code is a temporary code that
 * is obtained by the client application after the user grants permission to
 * access their resources. This code is then exchanged for access and refresh
 * tokens that can be used to make API requests on behalf of the user.
 * @returns the result of the API call to the /token endpoint after exchanging
 * the authorization code for tokens. The result is expected to be a JSON
 * object containing the access and id tokens along with things like the
 * expiration time, token type, and request scopes. If there is an error, the
 * function returns null.
 */
export const exchangeAuthorizationCodeForTokens = async (
  envID: string,
  clientID: string,
  clientSecret: string,
  redirectURI: string,
  authorizationCode: string
) => {
  // Create headers for the api call to the /token endpoint. It's recommended
  // to use the HTTP Basic authentication scheme to include the client id and
  // secret rather than in the body of the POST request
  const headers = new Headers();
  headers.append("Content-Type", "application/x-www-form-urlencoded");

  // Authorization header is the result of base64 encoding client_id + ":" +
  // client_secret ex. output for the authorization header: "Basic
  // 01234mVlNzQtZT3Mi00ZmM0WI4ZWQtY2Q5NTMwTE0123456=="
  const authorizationHeader =
    "Basic " + base64Encode(clientID + ":" + clientSecret);
  headers.append("Authorization", authorizationHeader);

  // Use FormData because we're using "application/x-www-form-urlencoded".
  const urlBodyParams = new FormData();
  // The grant type is the OAuth 2.0 grant type that the PingOne app connection
  // is configured to accept.
  urlBodyParams.append("grant_type", "authorization_code");
  // Include the authorization code that was extracted from the url when the
  // user was redirected to the redirect_uri from PingOne.
  urlBodyParams.append("code", authorizationCode);
  // The redirect_uri is where the tokens will be sent and must be registered
  // with PingOne by configuring the app connection.
  urlBodyParams.append("redirect_uri", redirectURI);

  // Options to supply the fetch function.
  const requestOptions: RequestInit = {
    method: "POST",
    headers: headers,
    body: urlBodyParams,
    redirect: "follow",
  };

  // Make the exchange for tokens by calling the /token endpoint.
  try {
    const response = await fetch(
      "https://auth.pingone.com/" + envID + "/as/token",
      requestOptions
    );
    const result = await response.json();

    return result;
  } catch (error) {
    // Handle error
    console.log(error);

    return null;
  }
};

export default exchangeAuthorizationCodeForTokens;
